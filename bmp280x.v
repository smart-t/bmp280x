
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module bmp280x(

	//////////// ARDUINO //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SW //////////
	input 		     [3:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire				reset_n;			// reset signal
wire	[9:0]		divisor;			// 50Mhz/500 = 100KHz

reg	[10:0]	COUNT	= 11'd0;	// Counter for 100KHz clock
reg				CLK = 1'b0;		// Our clock
reg				SCLK = 1'b0;	// Our i2c clock
reg				GO;				// The trigger for i2c communications
reg				SDI;				// Slave Device Input
reg	[7:0]		SD_COUNTER;		// STATE DATA Counter
reg	[7:0]		T1_LSB;			// LSB T1 coeficient for temperature
reg	[7:0]		T1_MSB;			// MSB T1 coeficient for temperature
reg	[7:0]		T2_LSB;			// LSB T2 coeficient for temperature
reg	[7:0]		T2_MSB;			// LSB T2 coeficient for temperature

//=======================================================
//  Structural coding
//=======================================================

assign	reset_n = KEY[0];
assign	ARDUINO_RESET_N = KEY[0];
assign	divisor = 10'd400;				// set divisor 500 --> 50Mhz / 500 = 100KHz
	
always @(posedge FPGA_CLK1_50)
begin
	COUNT <= COUNT + 1;
	if (COUNT > divisor)
	begin
		COUNT <= 0;
		CLK <= !CLK;
	end
end
	
always @(posedge CLK or negedge reset_n)
begin
	if (!reset_n)
		GO <= 0;
	else
		if (!KEY[1])
		GO <= 1;
end

// I2C Counter
always @(posedge CLK or negedge reset_n)
begin
	if(!reset_n)
		SD_COUNTER <= 8'h00;
	else
	begin
		if (!GO)
			SD_COUNTER <= 8'h00;
		else
			if (SD_COUNTER < 8'h38)
				SD_COUNTER <= SD_COUNTER+1;
	end
end


// I2C Operation
always @(posedge CLK or negedge reset_n)
begin
	if (!reset_n)
	begin
		SCLK <= 1;
		SDI <= 1;
	end

	case (SD_COUNTER)
						
		//START
		8'h00: begin SDI<=1; SCLK<=1; end
		8'h01: SDI <= 0;
		8'h02: SCLK <= 0;
		
		//SLAVE ADDRESS 7-bit addressing see sheet
		8'h03: SDI <= 1;
		8'h04: SDI <= 1;
		8'h05: SDI <= 1;
		8'h06: SDI <= 0;
		8'h07: SDI <= 1;
		8'h08: SDI <= 1;
		8'h09: SDI <= 1;
		8'h0a: SDI <= 0;
		8'h0b: SDI <= 1'bz;	// SLAVE ACK
		
		//REGISTER
		8'h0c: SDI <= 1;
		8'h0d: SDI <= 0;
		8'h0e: SDI <= 0;
		8'h0f: SDI <= 0;
		8'h10: SDI <= 1;
		8'h11: SDI <= 0;
		8'h12: SDI <= 0;
		8'h13: SDI <= 0;
		8'h14: SDI <= 1'bz;	//SLAVE ACK
		
		//STOP
		8'h15: begin SDI <= 1'b0; SCLK <= 1'b1; end
		8'h16: SDI <= 1'b1;

		//START
		8'h17: begin SDI<=1; SCLK<=1; end
		8'h18: SDI <= 0;
		8'h19: SCLK <= 0;
		
		//SLAVE ADDRESS 7-bit addressing see sheet
		8'h1a: SDI <= 1;
		8'h1b: SDI <= 1;
		8'h1c: SDI <= 1;
		8'h1d: SDI <= 0;
		8'h1e: SDI <= 1;
		8'h1f: SDI <= 1;
		8'h20: SDI <= 1;
		8'h21: SDI <= 1;
		8'h22: SDI <= 1'bz;	// SLAVE ACK

		8'h23: T1_LSB[7] <= SDI;
		8'h24: T1_LSB[6] <= SDI;
		8'h25: T1_LSB[5] <= SDI;
		8'h26: T1_LSB[4] <= SDI;
		8'h27: T1_LSB[3] <= SDI;
		8'h28: T1_LSB[2] <= SDI;
		8'h29: T1_LSB[1] <= SDI;
		8'h2a: T1_LSB[0] <= SDI;
		8'h2b: SDI <= 0;	// MASTER ACK

		8'h2c: T1_MSB[7] <= SDI;
		8'h2d: T1_MSB[6] <= SDI;
		8'h2e: T1_MSB[5] <= SDI;
		8'h2f: T1_MSB[4] <= SDI;
		8'h30: T1_MSB[3] <= SDI;
		8'h31: T1_MSB[2] <= SDI;
		8'h32: T1_MSB[1] <= SDI;
		8'h33: T1_MSB[0] <= SDI;
		8'h34: SDI <= 0;	// MASTER ACK
		
		//STOP
		8'h35: begin SDI <= 1'b0; SCLK <= 1'b1; end
		8'h36: SDI <= 1'b1;
	
	endcase
	
end

assign ARDUINO_IO[15] =  ( ((SD_COUNTER >= 8'h03) & (SD_COUNTER <= 8'h15))|
									((SD_COUNTER >= 8'h1a) & (SD_COUNTER <= 8'h35))) ? ~CLK : SCLK;

assign ARDUINO_IO[14] = SDI;
assign ARDUINO_IO[13] = SCLK;

assign LED[7:0] = SD_COUNTER;

endmodule
